# Convert to list and replace NA with NULL
prior_params_list <- apply(prior_grid, 1, function(row) {
out <- as.list(row)
if (is.na(out$control.w)) out$control.w <- NULL
if (is.na(out$control.delta_gate)) out$control.delta_gate <- NULL
out
})
bayes_results <- list()
for (k in seq_along(prior_params_list)) {
prior_params <- prior_params_list[[k]]
settings <- prior_params
settings <- as.data.frame(t(unlist(settings)), stringsAsFactors = FALSE) %>%
mutate(across(
.cols = -c(ends_with(".name")),
.fns = as.numeric
))
post <- bayesian_lalonde_decision(endpoint = "binary",
data_summary = summary,
prior_params = prior_params,
arm_names = c(treatment = "treatment",
control = "control",
control_h = "control_h"),
lrv = 0.1, tv = 0.2,
fgr = 0.2, fsr = 0.1,
posterior_infer = T,
Lalonde_decision = T)
post$settings <- settings
post$data_summary <- cbind(i, summary)
bayes_results[[length(bayes_results)+1]] <- post
}
summary <- expand.grid(
control.n = 30,
treatment.n = 60,
treatment.count = 29,
control.count = c(6, 8, 10),
control_h.n = 637,
control_h.count = 172
)
summary$nsim <- 1:nrow(summary)
prior_grid <- expand.grid(
treatment.a0 = 1,
treatment.b0 = 1,
treatment.a = 1,
treatment.b = 1,
treatment.w = 0,
control.a0 = 1,
control.b0 = 1,
control.a = 1,
control.b = 1,
control.w = c(0,NA),
control.delta_gate = 0.1,
control.ess_h = c(1, 2) * unique(summary$control.n),
stringsAsFactors = FALSE
) %>%
mutate(control.delta_SAM = control.delta_gate)
# Convert to list and replace NA with NULL
prior_params_list <- apply(prior_grid, 1, function(row) {
out <- as.list(row)
if (is.na(out$control.w)) out$control.w <- NULL
if (is.na(out$control.delta_gate)) out$control.delta_gate <- NULL
out
})
bayes_results <- list()
for (k in seq_along(prior_params_list)) {
prior_params <- prior_params_list[[k]]
settings <- prior_params
settings <- as.data.frame(t(unlist(settings)), stringsAsFactors = FALSE) %>%
mutate(across(
.cols = -c(ends_with(".name")),
.fns = as.numeric
))
post <- bayesian_lalonde_decision(endpoint = "binary",
data_summary = summary,
settings = settings,
prior_params = prior_params,
arm_names = c(treatment = "treatment",
control = "control",
control_h = "control_h"),
lrv = 0.1, tv = 0.2,
fgr = 0.2, fsr = 0.1,
posterior_infer = T,
Lalonde_decision = T)
bayes_results[[length(bayes_results)+1]] <- post
}
results <- process_sim_results(bayes_results)
View(results)
post_params_all <- results$post_params_all
post_params_1 <- post_params_all[post_params_all$control.ess_h == 30, ]
post_params_2 <- post_params_all[post_params_all$control.ess_h == 60, ]
post_inference_all <- results$post_inference_all
post_params_1 <- post_params_all[post_params_all$control.ess_h == 30, ]
post_params_2 <- post_params_all[post_params_all$control.ess_h == 60, ]
post_inference_1 <- post_inference_all[post_inference_all$control.ess_h == 30, ]
post_inference_2 <- post_inference_all[post_inference_all$control.ess_h == 60, ]
#'   If `NULL`, a reasonable default will be used.
#' @param ... Additional arguments passed to `ggplot2` functions for customization.
#'
#' @return A ggplot object visualizing the posterior distributions.
#'
#' @importFrom dplyr %>% mutate select filter recode
#' @importFrom tidyr pivot_longer
#' @importFrom ggplot2 ggplot aes geom_area geom_line scale_color_manual scale_fill_manual labs annotate theme_minimal theme
#' @importFrom stats dbeta dnorm
#' @export
plot_posterior <- function(post_params, post_inference, data_summary, endpoint, x_range = NULL, ...) {
# --- Input Validation ---
if (!is.data.frame(post_params) || nrow(post_params) != 2) {
stop("'post_params' must be a data frame with exactly two rows: one for the 'Yes' borrowing scenario and one for the 'No' borrowing scenario.")
}
if (!"borrow" %in% names(post_params)) {
stop("'borrow' column not found in 'post_params'. It should contain 'Yes' and 'No' values.")
}
if (!all(c("Yes", "No") %in% post_params$borrow)) {
stop("'post_params' must contain one row where borrow == 'Yes' and one row where borrow == 'No'.")
}
if (nrow(post_inference) != 1) {
stop("Please provide the single row from 'post_inference_all' that corresponds to the borrowing scenario (e.g., borrow == 'Yes').")
}
# --- Extract parameter values ---
post_params_borrow <- post_params %>% filter(borrow == "Yes")
post_params_noborrow <- post_params %>% filter(borrow == "No")
# --- Determine plot range and compute densities ---
if (endpoint == "binary") {
x_vals <- seq(x_range[1] %||% 0, x_range[2] %||% 1, length.out = 1000)
df <- tibble::tibble(x = x_vals) %>%
mutate(
control_noborrow = dbeta(x, post_params_noborrow$control.a2_post, post_params_noborrow$control.b2_post),
treatment = dbeta(x, post_params_noborrow$treatment.a2_post, post_params_noborrow$treatment.b2_post),
control_borrow1 = dbeta(x, post_params_borrow$control.a1_post, post_params_borrow$control.b1_post),
control_borrow2 = dbeta(x, post_params_borrow$control.a2_post, post_params_borrow$control.b2_post),
control_mixture = post_params_borrow$control.w_post * control_borrow1 +
(1 - post_params_borrow$control.w_post) * control_borrow2
)
x_lab <- "Response Rate"
response_text <- paste0("Concurrent Control: ", data_summary$control.count, "/", data_summary$control.n)
} else { # continuous
if(is.null(x_range)) {
all_means <- c(post_params_borrow$control.mu1_post, post_params_borrow$control.mu2_post, post_params_noborrow$treatment.mu2_post)
all_sds <- c(post_params_borrow$control.sigma1_post, post_params_borrow$control.sigma2_post, post_params_noborrow$treatment.sigma2_post)
min_x <- min(all_means - 3 * all_sds, na.rm = TRUE)
max_x <- max(all_means + 3 * all_sds, na.rm = TRUE)
x_range <- c(min_x, max_x)
}
x_vals <- seq(x_range[1], x_range[2], length.out = 1000)
df <- tibble::tibble(x = x_vals) %>%
mutate(
control_noborrow = dnorm(x, post_params_noborrow$control.mu2_post, post_params_noborrow$control.sigma2_post),
treatment = dnorm(x, post_params_noborrow$treatment.mu2_post, post_params_noborrow$treatment.sigma2_post),
control_borrow1 = dnorm(x, post_params_borrow$control.mu1_post, post_params_borrow$control.sigma1_post),
control_borrow2 = dnorm(x, post_params_borrow$control.mu2_post, post_params_borrow$control.sigma2_post),
control_mixture = post_params_borrow$control.w_post * control_borrow1 +
(1 - post_params_borrow$control.w_post) * control_borrow2
)
x_lab <- "Value"
response_text <- paste0("Concurrent Control: n=", data_summary$control.n)
}
# --- Prepare data for plotting ---
df_long <- df %>%
select(x, control_noborrow, control_mixture, treatment) %>%
pivot_longer(-x, names_to = "curve", values_to = "density") %>%
mutate(curve = recode(curve,
control_noborrow = "Concurrent Control",
control_mixture = "Hybrid Control (SAM Prior)",
treatment = "Experimental Arm"))
# --- Define plot aesthetics ---
fill_colors <- c(
"Concurrent Control" = rgb(0, 0, 1, 0.3),
"Hybrid Control (SAM Prior)" = rgb(1, 0, 0, 0.3),
"Experimental Arm" = rgb(0, 1, 0, 0.3)
)
line_colors <- c(
"Concurrent Control" = "blue",
"Hybrid Control (SAM Prior)" = "red",
"Experimental Arm" = "green"
)
# --- Create annotation text ---
prob_text <- paste0(
"P(Minimal) = ", sprintf("%.3f", post_inference$pr_m),"\n",
"P(Lower) = ", sprintf("%.3f", post_inference$pr_l), "\n",
"P(Target) = ", sprintf("%.3f", post_inference$pr_t), "\n\n",
"Decision: ", stringr::str_to_title(post_inference$decision_pr)
)
# --- Create the plot ---
p <- ggplot(df_long, aes(x = x, y = density, fill = curve, color = curve)) +
geom_area(alpha = 0.3, position = "identity") +
geom_line(size = 1.2) +
scale_color_manual(values = line_colors) +
scale_fill_manual(values = fill_colors) +
labs(
title = response_text,
x = x_lab,
y = "Density",
color = "",
fill = ""
) +
annotate("text", x = Inf, y = Inf, label = prob_text, hjust = 1.1, vjust = 1.1,
size = 4.5, fontface = "bold", color = "black") +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(size = 14, face = "bold", hjust = 0),
legend.position = "bottom"
)
# Apply any additional ggplot2 customizations
p <- p + list(...)
return(p)
}
i
i=1
#' plot_posterior(
#'   post_params = params_for_plot,
#'   post_inference = inference_for_plot,
#'   endpoint = "binary",
#'   labs(
#'     title = "Posterior Distributions for a Single Trial",
#'     subtitle = "Scenario: ESS = 45"
#'   )
#' )
#' }
plot_posterior <- function(post_params, post_inference, endpoint, x_range = NULL, ...) {
# --- Input Validation ---
if (!is.data.frame(post_params) || nrow(post_params) != 2) {
stop("'post_params' must be a data frame with exactly two rows: one for a 'borrowing' scenario and one for the 'no borrowing' scenario.")
}
if (!"borrow" %in% names(post_params)) {
stop("'borrow' column not found in 'post_params'. It should contain 'Yes' and 'No' values or similar.")
}
if (sum(c("Yes", "No") %in% post_params$borrow) != 2) {
stop("'post_params' must contain one row where borrow == 'Yes' and one row where borrow == 'No'.")
}
if (nrow(post_inference) != 1) {
stop("Please provide the single row from 'post_inference_all' that corresponds to the borrowing scenario (e.g., borrow == 'Yes').")
}
if (!endpoint %in% c("binary", "continuous")) {
stop("'endpoint' must be either 'binary' or 'continuous'.")
}
# --- Extract parameter values ---
post_params_borrow <- post_params %>% filter(borrow == "Yes")
post_params_noborrow <- post_params %>% filter(borrow == "No")
# --- Determine plot range and compute densities ---
if (endpoint == "binary") {
x_vals <- seq(x_range[1] %||% 0, x_range[2] %||% 1, length.out = 1000)
df <- tibble::tibble(x = x_vals) %>%
mutate(
control_noborrow = dbeta(x, post_params_noborrow$control.a2_post, post_params_noborrow$control.b2_post),
treatment = dbeta(x, post_params_noborrow$treatment.a2_post, post_params_noborrow$treatment.b2_post),
control_borrow1 = dbeta(x, post_params_borrow$control.a1_post, post_params_borrow$control.b1_post),
control_borrow2 = dbeta(x, post_params_borrow$control.a2_post, post_params_borrow$control.b2_post),
control_mixture = post_params_borrow$control.w_post * control_borrow1 +
(1 - post_params_borrow$control.w_post) * control_borrow2
)
x_lab <- "Response Rate"
response_text <- paste0("Concurrent Control: ", post_params_noborrow$control.count, "/", post_params_noborrow$control.n)
} else { # continuous
if(is.null(x_range)) {
all_means <- c(post_params_borrow$control.mu1_post, post_params_borrow$control.mu2_post, post_params_noborrow$treatment.mu2_post)
all_sds <- c(post_params_borrow$control.sigma1_post, post_params_borrow$control.sigma2_post, post_params_noborrow$treatment.sigma2_post)
min_x <- min(all_means - 3 * all_sds, na.rm = TRUE)
max_x <- max(all_means + 3 * all_sds, na.rm = TRUE)
x_range <- c(min_x, max_x)
}
x_vals <- seq(x_range[1], x_range[2], length.out = 1000)
df <- tibble::tibble(x = x_vals) %>%
mutate(
control_noborrow = dnorm(x, post_params_noborrow$control.mu2_post, post_params_noborrow$control.sigma2_post),
treatment = dnorm(x, post_params_noborrow$treatment.mu2_post, post_params_noborrow$treatment.sigma2_post),
control_borrow1 = dnorm(x, post_params_borrow$control.mu1_post, post_params_borrow$control.sigma1_post),
control_borrow2 = dnorm(x, post_params_borrow$control.mu2_post, post_params_borrow$control.sigma2_post),
control_mixture = post_params_borrow$control.w_post * control_borrow1 +
(1 - post_params_borrow$control.w_post) * control_borrow2
)
x_lab <- "Value"
response_text <- paste0("Concurrent Control: n=", post_params_noborrow$control.n)
}
# --- Prepare data for plotting ---
df_long <- df %>%
select(x, control_noborrow, control_mixture, treatment) %>%
pivot_longer(-x, names_to = "curve", values_to = "density") %>%
mutate(curve = recode(curve,
control_noborrow = "Concurrent Control",
control_mixture = "Hybrid Control (SAM Prior)",
treatment = "Experimental Arm"))
# --- Define plot aesthetics ---
fill_colors <- c(
"Concurrent Control" = rgb(0, 0, 1, 0.3),
"Hybrid Control (SAM Prior)" = rgb(1, 0, 0, 0.3),
"Experimental Arm" = rgb(0, 1, 0, 0.3)
)
line_colors <- c(
"Concurrent Control" = "blue",
"Hybrid Control (SAM Prior)" = "red",
"Experimental Arm" = "green"
)
# --- Create annotation text ---
prob_text <- paste0(
"P(Minimal) = ", sprintf("%.3f", post_inference$pr_m),"\n",
"P(Lower) = ", sprintf("%.3f", post_inference$pr_l), "\n",
"P(Target) = ", sprintf("%.3f", post_inference$pr_t), "\n\n",
"Decision: ", stringr::str_to_title(post_inference$decision_pr)
)
# --- Create the plot ---
p <- ggplot(df_long, aes(x = x, y = density, fill = curve, color = curve)) +
geom_area(alpha = 0.3, position = "identity") +
geom_line(size = 1.2) +
scale_color_manual(values = line_colors) +
scale_fill_manual(values = fill_colors) +
labs(
title = response_text,
x = x_lab,
y = "Density",
color = "",
fill = ""
) +
annotate("text", x = Inf, y = Inf, label = prob_text, hjust = 1.1, vjust = 1.1,
size = 4.5, fontface = "bold", color = "black") +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(size = 14, face = "bold", hjust = 0),
legend.position = "bottom"
)
# Apply any additional ggplot2 customizations
p <- p + list(...)
return(p)
}
#'   customization (e.g., `labs()`, `theme()`).
#'
#' @return A ggplot object visualizing the posterior distributions.
#'
#' @importFrom dplyr %>% mutate select filter recode
#' @importFrom tidyr pivot_longer
#' @importFrom ggplot2 ggplot aes geom_area geom_line scale_color_manual scale_fill_manual labs annotate theme_minimal theme
#' @importFrom stats dbeta dnorm
#' @importFrom glue glue
#' @export
plot_posterior <- function(post_params, post_inference, endpoint, title_format = NULL, x_range = NULL, ...) {
# --- Input Validation ---
if (!is.data.frame(post_params) || nrow(post_params) != 2) {
stop("'post_params' must be a data frame with exactly two rows: one for a 'borrowing' scenario and one for the 'no borrowing' scenario.")
}
if (!"borrow" %in% names(post_params)) {
stop("'borrow' column not found in 'post_params'. It should contain 'Yes' and 'No' values or similar.")
}
if (sum(c("Yes", "No") %in% post_params$borrow) != 2) {
stop("'post_params' must contain one row where borrow == 'Yes' and one row where borrow == 'No'.")
}
if (nrow(post_inference) != 1) {
stop("Please provide the single row from 'post_inference_all' that corresponds to the borrowing scenario (e.g., borrow == 'Yes').")
}
if (!endpoint %in% c("binary", "continuous")) {
stop("'endpoint' must be either 'binary' or 'continuous'.")
}
# --- Extract parameter values ---
post_params_borrow <- post_params %>% filter(borrow == "Yes")
post_params_noborrow <- post_params %>% filter(borrow == "No")
# --- Determine plot range and compute densities ---
if (endpoint == "binary") {
x_vals <- seq(x_range[1] %||% 0, x_range[2] %||% 1, length.out = 1000)
df <- tibble::tibble(x = x_vals) %>%
mutate(
control_noborrow = dbeta(x, post_params_noborrow$control.a2_post, post_params_noborrow$control.b2_post),
treatment = dbeta(x, post_params_noborrow$treatment.a2_post, post_params_noborrow$treatment.b2_post),
control_borrow1 = dbeta(x, post_params_borrow$control.a1_post, post_params_borrow$control.b1_post),
control_borrow2 = dbeta(x, post_params_borrow$control.a2_post, post_params_borrow$control.b2_post),
control_mixture = post_params_borrow$control.w_post * control_borrow1 +
(1 - post_params_borrow$control.w_post) * control_borrow2
)
x_lab <- "Response Rate"
response_text <- paste0("Concurrent Control: ", post_params_noborrow$control.count, "/", post_params_noborrow$control.n)
} else { # continuous
if(is.null(x_range)) {
all_means <- c(post_params_borrow$control.mu1_post, post_params_borrow$control.mu2_post, post_params_noborrow$treatment.mu2_post)
all_sds <- c(post_params_borrow$control.sigma1_post, post_params_borrow$control.sigma2_post, post_params_noborrow$treatment.sigma2_post)
min_x <- min(all_means - 3 * all_sds, na.rm = TRUE)
max_x <- max(all_means + 3 * all_sds, na.rm = TRUE)
x_range <- c(min_x, max_x)
}
x_vals <- seq(x_range[1], x_range[2], length.out = 1000)
df <- tibble::tibble(x = x_vals) %>%
mutate(
control_noborrow = dnorm(x, post_params_noborrow$control.mu2_post, post_params_noborrow$control.sigma2_post),
treatment = dnorm(x, post_params_noborrow$treatment.mu2_post, post_params_noborrow$treatment.sigma2_post),
control_borrow1 = dnorm(x, post_params_borrow$control.mu1_post, post_params_borrow$control.sigma1_post),
control_borrow2 = dnorm(x, post_params_borrow$control.mu2_post, post_params_borrow$control.sigma2_post),
control_mixture = post_params_borrow$control.w_post * control_borrow1 +
(1 - post_params_borrow$control.w_post) * control_borrow2
)
x_lab <- "Value"
response_text <- paste0("Concurrent Control: n=", post_params_noborrow$control.n)
}
# --- Prepare data for plotting ---
df_long <- df %>%
select(x, control_noborrow, control_mixture, treatment) %>%
pivot_longer(-x, names_to = "curve", values_to = "density") %>%
mutate(curve = recode(curve,
control_noborrow = "Concurrent Control",
control_mixture = "Hybrid Control (SAM Prior)",
treatment = "Experimental Arm"))
# --- Define plot aesthetics ---
fill_colors <- c(
"Concurrent Control" = rgb(0, 0, 1, 0.3),
"Hybrid Control (SAM Prior)" = rgb(1, 0, 0, 0.3),
"Experimental Arm" = rgb(0, 1, 0, 0.3)
)
line_colors <- c(
"Concurrent Control" = "blue",
"Hybrid Control (SAM Prior)" = "red",
"Experimental Arm" = "green"
)
# --- Create annotation text ---
prob_text <- paste0(
"P(Minimal) = ", sprintf("%.3f", post_inference$pr_m),"\n",
"P(Lower) = ", sprintf("%.3f", post_inference$pr_l), "\n",
"P(Target) = ", sprintf("%.3f", post_inference$pr_t), "\n\n",
"Decision: ", stringr::str_to_title(post_inference$decision_pr)
)
# --- Create the plot ---
p <- ggplot(df_long, aes(x = x, y = density, fill = curve, color = curve)) +
geom_area(alpha = 0.3, position = "identity") +
geom_line(size = 1.2) +
scale_color_manual(values = line_colors) +
scale_fill_manual(values = fill_colors) +
labs(
title = response_text,
x = x_lab,
y = "Density",
color = "",
fill = ""
) +
annotate("text", x = Inf, y = Inf, label = prob_text, hjust = 1.1, vjust = 1.1,
size = 4.5, fontface = "bold", color = "black") +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(size = 14, face = "bold", hjust = 0),
legend.position = "bottom"
)
# Apply any additional ggplot2 customizations
p <- p + list(...)
return(p)
}
i=1
plot_posterior(post_params = post_params_1[post_params_1$nsim == i,],
post_inference = post_inference_1[post_inference_1$nsim == i,],
data_summary = data_summary_all[data_summary_all$nsim == i,],
title_format = "Concurrent Control: {control.count}/{control.n}")
post_inference_1[post_inference_1$nsim == i,]
post_inference_1[post_inference_1$nsim == i,]
plot_posterior(post_params = post_params_1[post_params_1$nsim == i,],
post_inference = post_inference_1[post_inference_1$nsim == i & post_inference_1$borrow == "Yes", ],
data_summary = data_summary_all[data_summary_all$nsim == i,],
title_format = "Concurrent Control: {control.count}/{control.n}")
plot_posterior(post_params = post_params_1[post_params_1$nsim == i,],
post_inference = post_inference_1[post_inference_1$nsim == i & post_inference_1$borrow == "Yes", ],
endpoint = "binary",
title_format = "Concurrent Control: {control.count}/{control.n}")
plot_posterior(post_params = post_params_1[post_params_1$nsim == i,],
post_inference = post_inference_1[post_inference_1$nsim == i & post_inference_1$borrow == "Yes", ],
endpoint = "binary",
title_format = "Concurrent Control: {control.count}/{control.n}")
p1_list <- list()
p1_list <- list()
p2_list <- list()
for(i in 1:3){
p1_list[[i]] <- plot_posterior(post_params = post_params_1[post_params_1$nsim == i,],
post_inference = post_inference_1[post_inference_1$nsim == i & post_inference_1$borrow == "Yes", ],
endpoint = "binary",
title_format = "Concurrent Control: {control.count}/{control.n}")
p2_list[[i]] <-  plot_posterior(post_params = post_params_2[post_params_2$nsim == i,],
post_inference = post_inference_2[post_inference_2$nsim == i & post_inference_2$borrow == "Yes", ],
endpoint = "binary",
title_format = "Concurrent Control: {control.count}/{control.n}")
}
p1 <- wrap_plots(p1_list) +
plot_layout(nrow = 1, guides = 'collect',
axes = "collect") +
plot_annotation(title = expression(paste(n[t], ' : ', n[cc], ' : ', n[hc*','*e], ' = 2:1:1')),
theme = theme(plot.title = element_text(size = 18)))
library(patchwork)
p1 <- wrap_plots(p1_list) +
plot_layout(nrow = 1, guides = 'collect',
axes = "collect") +
plot_annotation(title = expression(paste(n[t], ' : ', n[cc], ' : ', n[hc*','*e], ' = 2:1:1')),
theme = theme(plot.title = element_text(size = 18)))
p1 <- wrap_elements(p1)
p2 <- wrap_plots(p2_list) +
plot_layout(nrow = 1, guides = 'collect',
axes = "collect") +
plot_annotation(title = expression(paste(n[t], ' : ', n[cc], ' : ', n[hc*','*e], ' = 2:1:2')),
theme = theme(plot.title = element_text(size = 18)))
p2 <- wrap_elements(p2)
p_combined <- p1/p2
p_combined
library(LalondeBayesBorrow)
library(dplyr)
library(ggplot2)
# 1. Set up your simulation parameters
param_grid <- expand.grid(
trt_n = c(45, 60),
ctrl_p = seq(0.15, 0.45, 0.15),
stringsAsFactors = FALSE
) %>%
mutate(ctrl_n = trt_n, trt_p = 0.2 + ctrl_p)
data_gen_params_list <- lapply(apply(param_grid, 1, as.list),
create_data_gen_params, endpoint = "binary")
data_gen_params_list
# 2. Define Historical Data and Borrowing Strategies
data_gen_params_h <- list(control_h = list(name = "control_h", n = 180, p = 0.3))
data_gen_params_h
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::install()
