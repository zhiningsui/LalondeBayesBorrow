% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calc_post_dist_metrics.R
\name{calc_post_dist_metrics}
\alias{calc_post_dist_metrics}
\title{Calculate Posterior Distribution Metrics}
\usage{
calc_post_dist_metrics(endpoint, true_value, post_est_ci, remove.na = FALSE)
}
\arguments{
\item{endpoint}{A string. Specifies the type of endpoint ("g-score" or "OR").}

\item{true_value}{A scalar. The true median ratio for the "g-score" endpoint or the true rate difference for the "OR" endpoint.}

\item{post_est_ci}{A data frame. Contains posterior inference obtained from `bayesian_lalonde_decision()`, including posterior estimates, standard errors, and 95\% credible intervals for each simulation repetition.}

\item{remove.na}{}
}
\value{
A data frame containing the evaluation metrics for the posterior distribution, including:
  - `bias_avg`: The average bias of the estimate.
  - `sd_avg`: The average standard error of the estimate.
  - `sd_empirical`: The empirical standard deviation of the estimate.
  - `cp`: The nominal coverage probability (95\%).
  - Additional metrics specific to the "g-score" endpoint. More details can be found in `eval_gscore_approx_dist()`.
}
\description{
This function calculates various evaluation metrics for the posterior distribution, including the average bias, standard error, empirical standard deviation, and nominal coverage probability.
For the "g-score" endpoint, it calculates the log-median ratio, and for the "OR" endpoint, it calculates the rate difference.
}
\examples{
# Example with a continuous endpoint:
post1 <- convert_RBesT_mix(post = data.frame(w = 0.5, mu1 = 0, sigma1 = 1, mu2 = 0.5, sigma2 = 1),
                           endpoint = "continuous")
post2 <- convert_RBesT_mix(post = data.frame(w = 0.9, mu1 = 0, sigma1 = 1, mu2 = 0.5, sigma2 = 1),
                           endpoint = "continuous")
post_inference_result <- posterior_inference(post1, post2, quantiles = c(0.025, 0.975),
                         EXP_TRANSFORM = TRUE)

calc_post_dist_metrics("g-score", true_value = 1.2, post_est_ci = post_inference_result)
}
