#' Title
#'
#' @param endpoint
#' @param data_summary
#' @param prior_params
#' @param lrv
#' @param tv
#' @param fgr
#' @param fsr
#' @param arm_names
#' @param posterior_infer
#' @param Lalonde_decision
#'
#' @return
#' @export
#'
#' @examples
bayesian_lalonde_decision <- function(endpoint, data_summary,
                                      prior_params, lrv = 0, tv= 0, fgr = 0.2, fsr = 0.1, arm_names,
                                      posterior_infer = TRUE, Lalonde_decision = TRUE) {
  nsims = unique(data_summary$nsim)

  cl <- makeCluster(detectCores() - 1)
  required_vars <- c("endpoint", "data_summary", "lrv", "tv", "fgr", "fsr", "arm_names",
                     "prior_params")
  required_funcs <- c(get_all_functions(environment()), get_all_functions(globalenv()))
  clusterExport(cl, c(required_vars, required_funcs), envir = environment())
  clusterEvalQ(cl, {
    library(dplyr)
    library(tidyr)
    library(purrr)
    library(RBesT)
    library(BayesianHybridDesign)
    library(parallel)
    library(data.table)
  })
  post_params <- parLapply(cl, nsims, function(nrep) {
    historical_ctrl <- if (any(names(arm_names) == "control_h")) data_summary[data_summary$nsim==nrep, startsWith(names(data_summary), "control_h.")] else NULL
    historical_trt <- if (any(names(arm_names) == "treatment_h")) data_summary[data_summary$nsim==nrep, startsWith(names(data_summary), "treatment_h.")]  else NULL
    current_ctrl <- data_summary[data_summary$nsim==nrep, startsWith(names(data_summary), "control.")]
    current_trt <- data_summary[data_summary$nsim==nrep, startsWith(names(data_summary), "treatment.")]

    post_c <- get_posterior_params(current = current_ctrl, historical = historical_ctrl, endpoint, prior_params, arm = "control")
    post_t <- get_posterior_params(current = current_trt, historical = historical_trt, endpoint, prior_params, arm = "treatment")

    post_params_i <- c(unlist(post_t$post), unlist(post_c$post))
    names(post_params_i) <- c(paste0("treatment.", names(post_t$post), "_post"), paste0("control.", names(post_c$post), "_post"))

    prior_ws <- c(post_t$w_prior, post_c$w_prior)
    names(prior_ws) <- c("treatment.w_prior", "control.w_prior")
    c(prior_ws, post_params_i)
  })
  stopCluster(cl)
  post_params <- bind_rows(post_params)

  post_inference <- NULL
  post_prob <- NULL
  post_est_ci <- NULL
  lalonde_criteria <- NULL

  cat("Start evaluating the posterior distribution (bias, standard error, 95% coverage probability).\n")
  if (posterior_infer) {cat("Start obtaining posterior inference (credible intervals and posterior probabilities).\n")}
  for (nrep in nsims) {
    p <- post_params[nrep, ]
    post_t_mix <- convert_RBesT_mix(post = p[startsWith(names(p), "treatment.") & endsWith(names(p), "_post")],
                                    endpoint = endpoint)
    post_c_mix <- convert_RBesT_mix(post =p[startsWith(names(p), "control.") & endsWith(names(p), "_post")],
                                    endpoint = endpoint)
    post_est_ci <- rbind(post_est_ci, posterior_inference(endpoint,
                                                          post1 = post_t_mix,
                                                          post2 = post_c_mix,
                                                          quantiles = c(0.025, 0.975)))

    if (posterior_infer) {
      quantiles <- if (lrv < tv) c(low = fgr, upper = 1 - fsr) else c(low = fsr, upper = 1 - fgr)
      lalonde_criteria <- bind_rows(lalonde_criteria, posterior_inference(endpoint,
                                                                          post1 = post_t_mix,
                                                                          post2 = post_c_mix,
                                                                          quantiles = quantiles))

      lrv_adj <- if (endpoint == "g-score") log(lrv) else lrv
      tv_adj <- if (endpoint == "g-score") log(tv) else tv

      pr_m <- posterior_prob(post_t_mix, lrv_adj, post_c_mix, range_type = ifelse(lrv < tv, "less", "greater"))
      pr_l <- posterior_prob(post_t_mix, ifelse(lrv < tv, lrv_adj, tv_adj), post_c_mix, range_type = "between",
                             value2 = ifelse(lrv < tv, tv_adj, lrv_adj))
      pr_t <- posterior_prob(post_t_mix, tv_adj, post_c_mix, range_type = ifelse(lrv < tv, "greater", "less"))

      post_prob <- rbind(post_prob, c(pr_m, pr_l, pr_t))
      colnames(post_prob) <- c("pr_m", "pr_l", "pr_t")
    }

    post_inference <- cbind(lalonde_criteria, post_prob)
  }

  if (Lalonde_decision) {
    cat("Start making decisions based on Lalonde framework.\n")
    post_inference$decision_pr <- with(post_inference, ifelse(pr_t > fsr & (pr_t + pr_l) > 1 - fgr, "go",
                                                              ifelse(pr_t > fsr  & (pr_t + pr_l) <= 1 - fgr, "consider",
                                                                     ifelse(pr_t <= fsr, "no-go", NA))))

    post_inference$decision_ci <- if (lrv < tv) {
      with(post_inference, ifelse(compare_ci_u > tv & compare_ci_l > lrv, "go",
                                  ifelse(compare_ci_u > tv & compare_ci_l <= lrv, "consider",
                                         ifelse(compare_ci_u <= tv, "no-go", NA))))

    } else {
      with(post_inference, ifelse(compare_ci_l < tv & compare_ci_u < lrv, "go",
                                  ifelse(compare_ci_l < tv & compare_ci_u >= lrv, "consider",
                                         ifelse(compare_ci_l >= tv, "no-go", NA))))
    }
    rownames(post_inference) <- NULL
  }

  return(list(post_params = post_params, post_est_ci = post_est_ci, post_inference = post_inference))
}
